Рисуем фракталы с помощью PHP и Cairo. Часть 2. Фракталы и грамматики Линдемана

Данная статья будет посвящена фракталам, которые часто встречаются в природе.
В ней мы рассмотрим фрактальную природу растений и способ их моделирования
с помощью порождающих грамматик Линденмайера.

Как уже было сказано ранее, фракталы встречаются повсюду в природе и это не удивительно,
что и в растительном царстве, мы наблюдаем их столь многочисленное разнообразие.

Аристид Линденмайер венгерский ботаник, занимаясь изучением физиологии растений и получив свой Ph.D по данному направлению в 1956 году глубоко задумался о том, каким образом можно описать  это многообразие растительных форм на простом и понятном всем языке математики. И пришёл к выводу, что это можно сделать, используя так называемые L-системы, впоследствии называнные в его честь.

L-система или система Линдемайра состоит из трёх элементов:
1) алфавит символов - множество состоящее из переменных (замененяемых символов) и констант (незаменяемых символов)
2) аксиома - строка символов, определяющая начальное состояние системы
3) множество порождающих правил, определяющих каким образом переменные могут быть заменены комбинациями других переменных и констант, присутствующих в алфавите

Итерируя множество порождающих правил над аксиомой в конечном и тоге мы получаем грамматику L-системы, представляющую простую строку из представленного алфавита символов. Поставив в соотвтествие каждому символу набор некоторых графических операций, мы получаем возможность моделировать формы растений (как делал это сам Аристид Линдемайер), создавать мозаики (например Мозаика Пенроуза) или генерировать другие самоподобные фигуры (например наподобие тех, что мы создавали ранее).

Чтож


Черепашья графика
"Тише едешь дальше будешь"

"Удерживайте тише сердце, сидите как черепаха...»


В 1966 Уолли Фёрзег и Сеймур Пайперт разработали язык Лого, поддерживающий простую и элегантную метафору для обучения детей программированию и работы с компьютерной графикой. Метафора получила название в честь этих милых незатейливых рептилий, к тому же оказавшихся первыми живыми существами долетевшими до Луны! Как говориться: Тише едешь - дальше будешь!

Для справки:
В 1968 году на борту советского беспилотного космического аппарата «Зонд-5», облетевшего вокруг Луны, находились две среднеазиатские черепахи, которые вернулись живыми и похудевшими на 10 %. Одна из черепах лишилась глаза из-за перегрузок при входе в атмосферу, доходивших до 20 g[2][3]. Эти черепахи стали первыми живыми существами, долетевшими до Луны. Впоследствии среднеазиатские черепахи отправлялись в космос на борту лунных космических аппаратов «Зонд-6» (разбился при посадке на Землю), «Зонд-7» и «Зонд-8» (благополучно вернулись). Выбор среднеазиатских черепах в качестве объектов космических экспериментов был связан с тем, что из-за замедленного обмена веществ в течение полёта их не надо было поить и кормить[4][5].

Подобно нашим космическим черепахам, эта метафора, а точнее её компьютерная реализация, оказалась очень неприхотливой в плане использования синтаксических конструкций для построения более менее сложных геометрических фигур, то есть позволила упростить язык для работы с компьютерной графикой, что всем очень понравилось, и за что она снискала всеобщую любовь и получила значительное распространение среди множества компьютерных языков, таких как Basic и Python.

К сожалению cairo не содержит встроенной поддержки черепашьей графики, поэтому нам нужно будет реализовать её самостоятельно в виде класса. Это можно сделать несколькими способами, например используя наследование или создав оболочку над классом cairo_context. Второй способ более простой и лёгкий, поэтому мы пойдём по этому пути. В результате получиться что-то вроде:

turtle_graphics.php

Итак, сдесь мы используем концепцию интерфейсов, которая заключается в определении функций, через которые мы будем взаимодействавать с нашим созданным классом. Мне очень нравиться как сделан интерфейс для библиотеки черепашьей графики на Python, поэтому я просто повторяю все необходимые функции, которые понадобяться нам вдальнейшем. Далее я имплементирую интерфейс к классу черепахи. И прописываю каждую из функции интерфейса в данном классе, связывая их с обеспечивающими основной функционал private-методами.

Ещё я хочу иметь возможность обращаться с цветами по их названию. Поэтому я создаю массив пар ключ - значение, из названий цветов и их RGB значений. А так же функцию для получения значений RGB-каналов по названию цвета.

Наша черепаха готова, и теперь мы смело можем отправляться в наше морское путешествие!

Морские водоросли
"Лучшие нивы, лучшие, отборные сорта фукусов, алярия и ламинария!"

– Капусту садят!
– Нет, в самом деле?
– Однако в самом деле капусту садят, – ответил Конобеев. – Морскую капусту.

– Но ведь это не капуста, а ветки бамбука.
– Ну да, ветки бамбука. Вишь ты, какая штука: когда морская капуста выпустит семя…
– Споры?
– Никаких споров.

– Непривычка, и больше ничего, – возразил Волков, – морская капуста вкуснее земной и гораздо питательнее. Когда ты привыкнешь, то не захочешь другой. И я уверен, что морская капуста скоро будет таким же необходимым блюдом за каждым столом, как картошка.

Химические исследования, произведенные не так давно, показали, что морская капуста действительно содержит много питательных веществ и годна и для питания человека, и для корма скота. В ней содержится от шести до тридцати процентов белка и немного жира – примерно процента полтора-два. Таким образом, в капусте есть все необходимые для питания вещества. Японская капуста «аманори» богата протеином5 и является очень хорошим питательным веществом. Японцы большие мастера приготовлять из аманори различные кушанья. Они кладут высушенную капусту в приправы или едят ее отдельно приготовленной. Особенно вкусными получаются консервы аманори с бобовой соей


Начнём мы наше погружение в мир L-систем рассмотрев простейшие виды грамматик по названию морских водорослей. Итак первое что нам нужно сделать это генератор L-системы. Этот класс будет принимать на вход аксиому и порождающие правила, а так же количество необходимых итераций и на выходе выдавать строку из алфавита необходимой для графического построения самой L-системы. Получитсья следующий класс:

l_system.gene.PHP

Здесь нет ничего сложного. Просто берём, тестируем, получаем большущую строку уже похожую на непроходимый лес саргасовых водрослей. Теперь нам нужно это визуализировать использовав возможности нашей метафорической черепахи. Мы пишем класс:

lsystem.php

Здесь стоит обратить внимание на функцию draw потому как в ней мы как раз и производим связь между алфавитом L-системы и способом его отрисовки, нам понадобиться всего 9 символов, чтобы иметь возможность вырастить наш подводный лес из водорослей, создать кусты, деревья и даже нарисовать какие-нибудь другие фракталы, которые не встречаются в живой природе...

Это не очень удобно, каждый раз менять параметры L-системы, чтобы посмотреть какой-нибудь другой вид фрактала. Поэтому мы создадим ещё один файл, который будет содежать массив с различными параметрами L-систем доступными их по конкретному наименованию. Мы будем заполнять его новыми видами систем по мере надобности. Вы можете сами поиграться с параметрами, чтобы затем сохранить понравившиеся системы в данном файле.






Папоротник Барнсли

Тенью лёгкой и неслышной
Я замедлил у пути,
Там, где папоротник пышный
Должен будет расцвести.
 	— Константин Бальмонт, «Папоротник», 1900

Старинные русские предания гласят, что в ночь на Иванов день, расцветает таинственный цветок, охраняемый тёмной силой цветок папоротника, составляющий украшение ада. Тот кто завладеет цветоком получает власть над тёмными духами, силы повелевать землею и водою, отыскивать клады и делаться невидимкою. Звучит очень заманчиво, но сорвать цветок не так просто: злой дух срывает голову и отправляет душу в ад, всякого кто по неосторожности попадёт в её ловушку, откликнеться на голос близкого человека или поддасться на её искушение.

К счастью в мире компьютерных алгоритмов мы всегда можем сделать свою резервную копию! Поэтому мы смело продолжаем развивать нашу идею далее. Нам потребуется ещё несколько операторов для того, чтобы обеспечить возможность построения данной фигуры. Чтож добавим в ранее созанный класс пару кэйс-блоков содержащих следущие символы:

case '@':
 $step *= $reduce0;
 break;
case '#':
 $step *= $reduce1;
 break;
case '6':
case '7':
 $repeat = deg2rad(intval($alpha,8) - 48) * 10;
 break;

Их всего 4:
2 чтобы обеспечить последовательное уменьшение длины сегментов для отрисовки.
и ещё столько же чтобы более детально задать углы для сегментов.

Да, вы можете заметить, что повсюду витает этот мистический дух числа 42. Чтож, не удивляйтесь. Это плата за вход в тридесятое царство. Теперь вы можете видеть эти числа повсюду и это не паранойя, а элементарная комбинация психологических феноменов и математической статистики!

 Подведём итоги...
