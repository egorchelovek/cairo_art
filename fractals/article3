Рисуем фракталы с помощью PHP и Cairo. Часть 1. Основы фрактальной графики

Рисуем фракталы с помощью PHP и Cairo. Часть 2. Фракталы и грамматики Линдемана

Рисуем фракталы с помощью PHP и Cairo. Часть 3. Множества на комплексной плоскости


Фрактал... геометрическая фигура обладающие свойством самоподобия.
Бенуа Мандельброт — отец основатель фрактальной геометрии, бунтарь среди математиков,
впервые подробно описал этот термин в книге Фрактальная геометрия природы, изданной в 1977 году,
которая в значительной степени повлияла на развитие
компьютерной графики, так представила простой способ для генерации
сложных геометрических объектов таких как горы, облака и растения необходимых
для создания фотореалистичных сцен. Кто знает, может быть не попади эта
книга в 1978 году в руки Лорена Карпетнера — сооснователя анимационной компании Pixar, мы бы
так и не увидели всей красоты таких фильмов как "Звёздный путь 6","Аватар", "2012", "Матрица" и т.д.,
в которых задействован движок RenderMan,
содержащий написанный им в соавторстве с Робертом Л. Куком алгоритм Reyes rendering
- задумывавшийся как алгоритм, который может отрисовать всё что ты когда-либо видел.

Фрактал - fractus, что означает дробный. Этим свойством обладют практически все объекты природы.
Начиная с гигантских скоплений Галактик и заканчивая элементарными частицами такими как кварки.
Есть теория голографической Вселенной Девида Бома (ученика Эйнштейна), которая представляет её
как пространственно-временную голограмму, какждый участок которой содержит в себе полную информацию
о всей Вселенной в целом. Согласно этой теории Всё, включая мысли и поступки, происходит из
единой основы и любое изменение в одной части мира неменуемо отражается на всём целом.

Галактики, рельефы планет, океанские волны, облака и молнии, реки, формы растений и животных,
 и даже человеческое тело можно рассматривать как фракталы. Фрактальная геометрия возникла как
 оппозиция против идеальных платоновых тел, которые не могли передать в полной мере всё многообразие
 и сложность природных форм. Простые правила и повторяемость позволили расширить наши представления
 о возможных формах природе и о определении самой размерности. Появилось понятие дробной размерности
 или размерности Хаусдорфа -
 теперь размерность пространства может быть описана вещественными числами, тогда как раньше использовались
 только целые и неотрицательные числа для описания размерности.

 И так мы начинаем рассмотрение основ фрактальной
 графики на PHP. В нашей работе мы будем использовать графическую библиотеку Cairo,
 предназначенную для отрисовки векторной графики, которая написана на языке Си
 и может быть использована так же в связке с такими языками как C++, Python и т.д.,
 что обеспечивает переносимость графического кода между различными платформами.
 Так же к преимуществам Cairo можно отнести качественную отрисовку векторной графики,
 что в купе с другими достоинствами делает эту библиотеку популярной в среде open source.
 При этом мы будем использовать фреймворк GTK, чтобы иметь возможность взаимодействовать
 с нашим кодом через графический интерфейс и просматривать получившиеся изображения.

 Для начала нам придётся создать класс, который будет отвечать за
 создание окна, в котором мы будем рисовать изображение.

 Мы назовём его FractalDrawingWindow и унаследуем его от базового класса GtkWindow,
 который входит во фреймворк GTK. Это позволит нам работать с оконной системой
 нашей операционной системы и отображать сгенерированные изображения фракталов
 внутри неё.

 <?php

 abstract class FractalDrawingWindow extends GtkWindow {

  // глубина рекурсии создаваемого фрактального изображения (по умолчанию)
   protected $recursionDepth = 5;

   // конструктор класса
   public function FractalDrawingWindow() {
     parent::__construct(); // здесь мы вызываем конструктор базового класса,
                            // для успешной инициализации окна


     $this->set_title($this->getName()); // устанавливаем название окна
                                         // по имени фрактала

     // устанавливаем корректный способ выхода из окна
     $this->connect_simple('destroy', array('gtk', 'main_quit'));


     $drawingArea = new GtkDrawingArea(); // создаём область для рисования

     // устанавливаем функцию отображения фрактала для данной области рисования
     $drawingArea->connect('expose_event',array($this,'onExpose'));

     // добавляем созданную область в наше окно
     $this->add($drawingArea);

     // устанавливаем размер окна
     $this->set_default_size(640,480); // по ширине и высоте

     // устаналиваем позицию окна на экране
     $this->set_position(GTK::WIN_POS_CENTER);

     // включаем отображение окна
     $this->show_all(); // здесь начинается запуск алгоритма отрисовки
                        // и отображения фрактала
   }

   // функция экспозиции фрактала
   public function onExpose($darea, $event){
     $context = $darea->window->cairo_create(); // создаём Cairo-контекст для отрисовки
     $this->onDraw($context); // отрисовываем конкретный вид фрактала
   }

   // функция установа глубины рекурсии
   public function setRecursionDepth($recursionDepth){
   // здесь мы ограничиваем глубину рекурсии для избежания segmentation fault
     if($recursionDepth >= 0 && $recursionDepth <= 22){
       $this->recursionDepth = $recursionDepth;
     }
   }

   // мы используем чистые абстрактные методы, чтобы
   abstract public function getName(); // определить названия фракталов
   abstract protected function onDraw($context); // и методы их отрисовки
                                                 // в классах-потомках
 }
 ?>

 Созданный нами класс представляет собой абстрактный класс, предоставляющий
 возможность использования окна GTK для отрисовки. Но данный класс не
 предполагает что именно мы будем рисовать в этом окне, поэтому нам
 нужно создать для него классы-потомки, которые будут определять конкретный
 вид функций названия и способа отрисовки фракталов.


Теперь мы можем приступать к рассмотрению конкретных видов фракталов и способов их рисования.
И начнём мы с фрактала, который получил название в честь немецкого математика, Георга Кантора.

"Ashes to ashes, dust to dust"

 Канторова пыль

 И так рассмотрим следующий код:

 <?php
 include 'drawing_window.php'; // здесь мы подключаем файл с ранее созданным
                               // классом для работы с окнами GTK

// мы создаём класс по конкретному виду фрактала и унаследуем его от класса
// FractalDrawingWindow капсулирующего функци для работы с оконной системой
 class CantorDust extends FractalDrawingWindow {

   // здесь мы определяем функцию, которая будет отображаться в названии окна
   public function getName() {
     return "Cantor dust fractal";
   }

   // здесь мы определяем метод отрисовки фрактала
   protected function onDraw($context){

     // устанавливаем основной цвет для отрисовки
     $context->setSourceRgb(0.4, 0.9, 0.4);

     // запускаем рекурсивную функцию отрисовки фрактала "Канторова пыль"
     $this->draw($context,$this->recursionDepth, 0, 0, $height, floatval($width) / $this->recursionDepth);
   }

   // рекурсивная функция отрисовки
   public function draw($context,$level, $posX, $posY, $sizeX, $sizeY){
     // в параметрах мы передаём начальные позиции по оси X и Y и размеры элементов для каждого шага рекурсии

     // по достижении установленной глубины рекурсии, производим выход из функции отрисовки
     if($level == 0){
       return;
     }

     // вычисляем новый размер и положение элемента по оси X
     $newSizeX = $sizeX / 3;
     $newPosX = $posX + 2 * $newSizeX;

     // рисуем левый прямоугольник
     $context->rectangle($posX,$posY,$newSizeX,$sizeY); // устанавливаем параметры
     $context->fill(); // делаем заливку выделенным цветом, уставноленным ранее в методе onDraw()

     // рисуем правый прямоугольник
     $context->rectangle($newPosX,$posY,$newSizeX,$sizeY);
     $context->fill();

     // запускаем отрисовку следующего уровня рекурсии
     $this->draw($context, $level - 1, $posX, $posY + $sizeY, $newSizeX, $sizeY); // слева
     $this->draw($context, $level - 1, $newPosX, $posY + $sizeY, $newSizeX, $sizeY); // и справа
   }
 }

 // Тест
 $fractal = new CantorDust();  // создаём объект класса для нашего фрактала
 $fractal->setRecursionDepth(15); // устанавливаем глубину рекурсии
 Gtk::main(); // запускаем наш фреймворк в работу
 ?>

 После запуска мы увидим что-то вроде:
 img1

 Это двумерная версия фрактала Канторова пыль, который встречается на практике в области
 обработки речевых сигналов, тогда когда нужно избавиться от постороннего шума...

 Здесь мы используем свойство рекурсии, о котором мы говорили ранее в предыдущих статьях
 по PHP. Это свойство позволяет сделать наш код наглядным и простым и сфокусироваться
 на самой отрисовке. Алгоритм отрисовки достаточно прост: мы берём точку слева и рисуем прямоугольник
 в треть длины всего отрезка с верху, а затем берём точку справа и рисуем такой же отрезок,
 и после повторяем эту операцию для левой и правой части, погружась на всё более глубокий
 уровень рекурсии.

 Для того чтобы нарисовать прямоугольник нам достаточно всего трёх методов вызываемых из объекта
 cairo-context - это rectangle устанавливающий параметры прямоугольника и
 fill - производящий заливку цветом
 а так же setSourceRgb - устанавливающий цвет заливки!

 Ура, теперь можно сделать перерыв и попить чай! Только что мы разобрались в том,
 как рисовать простейший фрактал используя PHP и Cairo!

 Теперь рассмотрим пример по сложнее.


  Дерево Пифагора

  



 Дракон Хартера - Хейтуэя
